//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@allow('all', true)
model Currency {
  id                            String          @id() @default(uuid())
  name                          String?
  code                          String?
  symbol                        String?
  exchangeRatesAsBaseCurrency   ExchangeRate[]  @relation("baseCurrency")
  exchangeRatesAsTargetCurrency ExchangeRate[]  @relation("targetCurrency")
  reserves                      Reserve[]       @relation("currency")
  exchangeOrdersAsFromCurrency  ExchangeOrder[] @relation("fromCurrency")
  exchangeOrdersAsToCurrency    ExchangeOrder[] @relation("toCurrency")
  dateCreated                   DateTime        @default(now())
  dateUpdated                   DateTime        @default(now()) @updatedAt()
}

/// @@allow('all', true)
model ExchangeRate {
  id               String          @id() @default(uuid())
  rate             Float?
  timestamp        String
  baseCurrencyId   String
  baseCurrency     Currency?       @relation(fields: [baseCurrencyId], references: [id], name: "baseCurrency")
  targetCurrencyId String
  targetCurrency   Currency?       @relation(fields: [targetCurrencyId], references: [id], name: "targetCurrency")
  exchangeOrders   ExchangeOrder[] @relation("exchangeRate")
  dateCreated      DateTime        @default(now())
  dateUpdated      DateTime        @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Reserve {
  id          String    @id() @default(uuid())
  amount      Float?
  currencyId  String
  currency    Currency? @relation(fields: [currencyId], references: [id], name: "currency")
  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @default(now()) @updatedAt()
}

/// @@allow('all', true)
model ExchangeOrder {
  id             String        @id() @default(uuid())
  amountFrom     Float?
  amountTo       Float?
  status         String?
  timestamp      String
  userId         String
  user           User?         @relation(fields: [userId], references: [id], name: "user")
  fromCurrencyId String
  fromCurrency   Currency?     @relation(fields: [fromCurrencyId], references: [id], name: "fromCurrency")
  toCurrencyId   String
  toCurrency     Currency?     @relation(fields: [toCurrencyId], references: [id], name: "toCurrency")
  exchangeRateId String
  exchangeRate   ExchangeRate? @relation(fields: [exchangeRateId], references: [id], name: "exchangeRate")
  dateCreated    DateTime      @default(now())
  dateUpdated    DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Message {
  id          String   @id() @default(uuid())
  content     String?
  readStatus  Boolean
  timestamp   String
  senderId    String
  sender      User?    @relation(fields: [senderId], references: [id], name: "sender")
  receiverId  String
  receiver    User?    @relation(fields: [receiverId], references: [id], name: "receiver")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Review {
  id          String   @id() @default(uuid())
  rating      Float?
  comment     String?
  timestamp   String
  userId      String
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  reviewerId  String
  reviewer    User?    @relation(fields: [reviewerId], references: [id], name: "reviewer")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model BlogPost {
  id          String   @id() @default(uuid())
  title       String?
  content     String?
  imageUrl    String?
  timestamp   String
  authorId    String
  author      User?    @relation(fields: [authorId], references: [id], name: "author")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id                 String             @id() @default(uuid())
  name               String?
  email              String?            @unique()
  pictureUrl         String?            @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation    String?
  emailVerified      Boolean?
  status             UserStatus         @default(VERIFIED)
  globalRole         String             @default("USER")
  /// @password
  /// @omit
  password           String?
  dateCreated        DateTime           @default(now())
  dateUpdated        DateTime           @default(now()) @updatedAt()
  accounts           Account[]
  sessions           Session[]
  pushNotifications  PushNotification[] @relation("user")
  exchangeOrders     ExchangeOrder[]    @relation("user")
  messagesAsSender   Message[]          @relation("sender")
  messagesAsReceiver Message[]          @relation("receiver")
  reviews            Review[]           @relation("user")
  reviewsAsReviewer  Review[]           @relation("reviewer")
  blogPostsAsAuthor  BlogPost[]         @relation("author")
}

/// @@allow('all', true)
model PushNotification {
  id           String   @id() @default(uuid())
  endpoint     String
  subscription String
  dateCreated  DateTime @default(now())
  dateUpdated  DateTime @default(now()) @updatedAt()
  userId       String
  user         User     @relation(fields: [userId], references: [id], name: "user")
}

/// @@allow('all', auth().id == user.id)
model Account {
  id                       String  @id() @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

/// @@allow('all', auth().id == user.id)
model Session {
  id           String   @id() @default(uuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
